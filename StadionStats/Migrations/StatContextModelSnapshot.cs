// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StadionStats.Data;

namespace StadionStats.Migrations
{
    [DbContext(typeof(StatContext))]
    partial class StatContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StadionStats.Models.Article", b =>
                {
                    b.Property<int>("ArticleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("ExternalLink");

                    b.Property<string>("Image");

                    b.Property<string>("ReadmoreLink");

                    b.Property<string>("TeaserText")
                        .IsRequired();

                    b.Property<string>("Text");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("ArticleID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("StadionStats.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attendance");

                    b.Property<int?>("AwayTeamId");

                    b.Property<DateTime>("Date");

                    b.Property<float>("GuestScore");

                    b.Property<float>("HomeScore");

                    b.Property<int?>("HomeTeamId");

                    b.Property<bool>("IsCorona");

                    b.Property<int>("LigaID");

                    b.Property<int>("StadionID");

                    b.Property<int>("Tv");

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("LigaID");

                    b.HasIndex("StadionID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("StadionStats.Models.Land", b =>
                {
                    b.Property<int>("LandID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Landenavn")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("LandID");

                    b.ToTable("Land");
                });

            modelBuilder.Entity("StadionStats.Models.Liga", b =>
                {
                    b.Property<int>("LigaID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LandID");

                    b.Property<string>("Logo");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("LigaID");

                    b.HasIndex("LandID");

                    b.ToTable("Liga");
                });

            modelBuilder.Entity("StadionStats.Models.Sponsor", b =>
                {
                    b.Property<int>("SponsorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SponsorText")
                        .IsRequired();

                    b.Property<int>("Team2ID");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("SponsorID");

                    b.HasIndex("Team2ID");

                    b.ToTable("Sponsor");
                });

            modelBuilder.Entity("StadionStats.Models.Stadion", b =>
                {
                    b.Property<int>("StadionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceCapacity");

                    b.Property<string>("Navn");

                    b.HasKey("StadionID");

                    b.ToTable("Stadion");
                });

            modelBuilder.Entity("StadionStats.Models.Team2", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Image");

                    b.Property<int>("LigaID");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.Property<int>("Seasontickets");

                    b.Property<string>("Sponsortext");

                    b.Property<int>("StadionID");

                    b.HasKey("Id");

                    b.HasIndex("LigaID");

                    b.HasIndex("StadionID");

                    b.ToTable("Team2s");
                });

            modelBuilder.Entity("StadionStats.Models.Game", b =>
                {
                    b.HasOne("StadionStats.Models.Team2", "AwayTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("AwayTeamId");

                    b.HasOne("StadionStats.Models.Team2", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId");

                    b.HasOne("StadionStats.Models.Liga", "Liga")
                        .WithMany("Games")
                        .HasForeignKey("LigaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StadionStats.Models.Stadion", "Stadion")
                        .WithMany()
                        .HasForeignKey("StadionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StadionStats.Models.Liga", b =>
                {
                    b.HasOne("StadionStats.Models.Land", "Land")
                        .WithMany("Liga")
                        .HasForeignKey("LandID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StadionStats.Models.Sponsor", b =>
                {
                    b.HasOne("StadionStats.Models.Team2", "Team2")
                        .WithMany("Sponsor")
                        .HasForeignKey("Team2ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StadionStats.Models.Team2", b =>
                {
                    b.HasOne("StadionStats.Models.Liga", "Liga")
                        .WithMany("Team2s")
                        .HasForeignKey("LigaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StadionStats.Models.Stadion", "Stadion")
                        .WithMany("Team2s")
                        .HasForeignKey("StadionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
